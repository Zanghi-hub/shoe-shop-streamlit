import streamlit as st
import pandas as pd
import datetime
import plotly.express as px
import os
import requests
from PIL import Image
from io import BytesIO
from geopy.distance import geodesic
import folium
from streamlit_folium import folium_static

# ------------------ C·∫§U H√åNH ------------------
st.set_page_config(
    page_title="H·ªá th·ªëng LIS - Shop Gi√†y D√©p",
    layout="wide",
    page_icon="üëü"
)
st.title("üëü H·ªÜ TH·ªêNG LIS - SHOP GI√ÄY D√âP ƒêA K√äNH")

# ------------------ D·ªÆ LI·ªÜU ------------------
# ƒê∆∞·ªùng d·∫´n file
kho_path = "data/kho.csv"
don_path = "data/don_hang.csv"
os.makedirs("data", exist_ok=True)

# H√¨nh ·∫£nh s·∫£n ph·∫©m (URL t·ª´ internet)
product_images = {
    "Gi√†y th·ªÉ thao Nike Air Max": "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/skwgyqrbfy4ohnr4mrsl/air-max-270-mens-shoes-KkLcGR.png",
    "Gi√†y da nam Clarks": "https://clarks.scene7.com/is/image/Pangaea2Build/26157262_W?fmt=jpeg&fit=constrain,1&wid=800",
    "Gi√†y sandal n·ªØ Adidas": "https://assets.adidas.com/images/w_600,f_auto,q_auto/89b8c7a6a9e54d7d8f22aaf20116ccfd_9366/Giay_Adilette_Aqua_W_Nau_IU3404_01_standard.jpg",
    "Gi√†y b√∫p b√™ n·ªØ Zara": "https://static.zara.net/photos///2023/I/0/2/p/2251/020/040/2/w/750/2251020040_1_1_1.jpg",
    "Gi√†y boot nam Timberland": "https://images.timberland.com/is/image/TimberlandEU/10062831-hero?wid=720&hei=720&fit=constrain,1",
    "Gi√†y th·ªÉ thao Puma RS-X": "https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:f8f8f8,w_750,h_750/global/374915/01/sv01/fnd/EEA/fmt/png",
    "Gi√†y l∆∞·ªùi n·ªØ Charles & Keith": "https://img.cdn.vncdn.io/cdn-pos/1f2180-6629/ps/20230601_jHM3XvBKWN.jpg",
    "Gi√†y th·ªÉ thao New Balance 574": "https://nb.scene7.com/is/image/NB/m5740gy2_nb_02_i?$pdpflexf2$&qlt=80&fmt=webp&wid=800&hei=800",
    "Gi√†y cao g√≥t n·ªØ Nine West": "https://m.media-amazon.com/images/I/71U+Kix4zPL._AC_UX575_.jpg",
    "Gi√†y th·ªÉ thao Converse Chuck Taylor": "https://www.converse.com/dw/image/v2/BCZC_PRD/on/demandware.static/-/Sites-cnv-master-catalog/default/dw3a93bfee/images/a_107/162050C_A_107X1.jpg"
}

# T·∫°o d·ªØ li·ªáu kho n·∫øu ch∆∞a t·ªìn t·∫°i
if os.path.exists(kho_path):
    df_kho = pd.read_csv(kho_path)
else:
    data = {
        "ten_sp": list(product_images.keys()),
        "so_luong": [50, 30, 20, 25, 15, 40, 35, 60, 10, 45],
        "gia": [2500000, 1800000, 1200000, 1500000, 3000000, 2200000, 1700000, 2000000, 1600000, 1900000],
        "mo_ta": [
            "Gi√†y th·ªÉ thao ƒë·∫ø kh√≠ Nike Air Max",
            "Gi√†y da nam cao c·∫•p Clarks",
            "Sandal n·ªØ tho√°ng m√°t Adidas",
            "Gi√†y b√∫p b√™ n·ªØ th·ªùi trang Zara",
            "Gi√†y boot nam ch·ªëng n∆∞·ªõc Timberland",
            "Gi√†y th·ªÉ thao Puma RS-X phong c√°ch",
            "Gi√†y l∆∞·ªùi n·ªØ th·ªùi trang Charles & Keith",
            "Gi√†y th·ªÉ thao New Balance 574",
            "Gi√†y cao g√≥t n·ªØ Nine West",
            "Gi√†y th·ªÉ thao Converse Chuck Taylor"
        ]
    }
    df_kho = pd.DataFrame(data)
    df_kho.to_csv(kho_path, index=False)

if os.path.exists(don_path):
    df_don = pd.read_csv(don_path)
else:
    df_don = pd.DataFrame(columns=[
        "ten_khach", "san_pham", "kenh", "trang_thai", "ngay_tao",
        "gia_tri", "khu_vuc", "don_vi_vc", "eta_ngay"
    ])

# ------------------ H√ÄM TI·ªÜN √çCH ------------------
def tinh_khoang_cach(dia_chi_kho, dia_chi_khach):
    kho_toa_do = {
        "Kho HCM": (10.8231, 106.6297),
        "Kho H√† N·ªôi": (21.0278, 105.8342),
        "Kho ƒê√† N·∫µng": (16.0544, 108.2022)
    }
    
    khach_toa_do = {
        "HCM": (10.7758, 106.7019),
        "H√† N·ªôi": (21.0285, 105.8542),
        "ƒê√† N·∫µng": (16.0680, 108.2127),
        "Kh√°c": (10.9639, 106.8567)
    }
    
    try:
        kho = kho_toa_do[dia_chi_kho]
        khach = khach_toa_do[dia_chi_khach]
        return geodesic(kho, khach).km
    except:
        return None

def tao_ban_do(dia_chi_kho, dia_chi_khach):
    kho_toa_do = {
        "Kho HCM": (10.8231, 106.6297),
        "Kho H√† N·ªôi": (21.0278, 105.8342),
        "Kho ƒê√† N·∫µng": (16.0544, 108.2022)
    }
    
    khach_toa_do = {
        "HCM": (10.7758, 106.7019),
        "H√† N·ªôi": (21.0285, 105.8542),
        "ƒê√† N·∫µng": (16.0680, 108.2127),
        "Kh√°c": (10.9639, 106.8567)
    }
    
    try:
        kho = kho_toa_do[dia_chi_kho]
        khach = khach_toa_do[dia_chi_khach]
        
        m = folium.Map(location=[(kho[0]+khach[0])/2, (kho[1]+khach[1])/2], zoom_start=10)
        
        folium.Marker(
            location=kho,
            popup=dia_chi_kho,
            icon=folium.Icon(color="green", icon="warehouse")
        ).add_to(m)
        
        folium.Marker(
            location=khach,
            popup=f"Kh√°ch h√†ng: {dia_chi_khach}",
            icon=folium.Icon(color="red", icon="user")
        ).add_to(m)
        
        folium.PolyLine(
            locations=[kho, khach],
            color="blue",
            weight=2.5,
            opacity=1
        ).add_to(m)
        
        return m
    except:
        return None

# ------------------ GI·ªé H√ÄNG ------------------
if 'cart' not in st.session_state:
    st.session_state.cart = []

# ------------------ GIAO DI·ªÜN KH√ÅCH H√ÄNG ------------------
menu = st.sidebar.radio("üîç B·∫°n l√†:", ["üõçÔ∏è Kh√°ch h√†ng", "üë®‚Äçüíº Doanh nghi·ªáp"])

if menu == "üõçÔ∏è Kh√°ch h√†ng":
    st.header("üõçÔ∏è C·ª¨A H√ÄNG GI√ÄY D√âP")
    
    # Hi·ªÉn th·ªã s·∫£n ph·∫©m
    st.subheader("üëü S·∫£n ph·∫©m n·ªïi b·∫≠t")
    cols = st.columns(4)
    
    for idx, product in enumerate(product_images.keys()):
        with cols[idx % 4]:
            st.image(product_images[product], width=200)
            product_info = df_kho[df_kho["ten_sp"] == product].iloc[0]
            st.markdown(f"**{product}**")
            st.markdown(f"üí∞ Gi√°: {product_info['gia']:,.0f} ƒë")
            st.markdown(f"üì¶ T·ªìn kho: {product_info['so_luong']}")
            
            # Th√™m v√†o gi·ªè h√†ng
            quantity = st.number_input("S·ªë l∆∞·ª£ng", 1, product_info['so_luong'], key=f"qty_{idx}")
            if st.button(f"üõí Th√™m v√†o gi·ªè #{idx+1}"):
                st.session_state.cart.append({
                    "san_pham": product,
                    "so_luong": quantity,
                    "don_gia": product_info['gia'],
                    "tong_tien": product_info['gia'] * quantity,
                    "anh": product_images[product]
                })
                st.success(f"‚úÖ ƒê√£ th√™m {product} v√†o gi·ªè h√†ng!")
                st.rerun()
    
    # Gi·ªè h√†ng trong sidebar
    st.sidebar.subheader("üõí Gi·ªè h√†ng c·ªßa b·∫°n")
    if st.session_state.cart:
        total_price = 0
        for i, item in enumerate(st.session_state.cart):
            with st.sidebar.expander(f"{item['san_pham']}"):
                st.image(item['anh'], width=100)
                st.markdown(f"**Gi√°:** {item['don_gia']:,.0f} ƒë")
                st.markdown(f"**S·ªë l∆∞·ª£ng:** {item['so_luong']}")
                st.markdown(f"**Th√†nh ti·ªÅn:** {item['tong_tien']:,.0f} ƒë")
                
                # N√∫t x√≥a s·∫£n ph·∫©m
                if st.button("‚ùå X√≥a", key=f"del_{i}"):
                    st.session_state.cart.pop(i)
                    st.rerun()
            
            total_price += item['tong_tien']
        
        st.sidebar.markdown(f"**T·ªïng c·ªông:** {total_price:,.0f} ƒë")
        
        # Form thanh to√°n
        with st.sidebar.form("checkout_form"):
            st.subheader("Th√¥ng tin thanh to√°n")
            customer_name = st.text_input("H·ªç t√™n")
            customer_phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
            khu_vuc = st.selectbox("Khu v·ª±c", ["HCM", "H√† N·ªôi", "ƒê√† N·∫µng", "Kh√°c"])
            
            if st.form_submit_button("üí≥ ƒê·∫∑t h√†ng"):
                if customer_name and customer_phone:
                    # Th√™m ƒë∆°n h√†ng
                    new_order = {
                        "ten_khach": customer_name,
                        "san_pham": ", ".join([item['san_pham'] for item in st.session_state.cart]),
                        "kenh": "Website",
                        "trang_thai": "Ch·ªù x·ª≠ l√Ω",
                        "ngay_tao": datetime.date.today(),
                        "gia_tri": total_price,
                        "khu_vuc": khu_vuc,
                        "don_vi_vc": "GHTK" if khu_vuc == "HCM" else "GHN" if khu_vuc == "H√† N·ªôi" else "VNPost",
                        "eta_ngay": 1 if khu_vuc == "HCM" else 2 if khu_vuc == "H√† N·ªôi" else 3
                    }
                    
                    df_don = pd.concat([df_don, pd.DataFrame([new_order])], ignore_index=True)
                    df_don.to_csv(don_path, index=False)
                    
                    # C·∫≠p nh·∫≠t t·ªìn kho
                    for item in st.session_state.cart:
                        mask = df_kho["ten_sp"] == item['san_pham']
                        if mask.any():
                            df_kho.loc[mask, "so_luong"] -= item['so_luong']
                    
                    df_kho.to_csv(kho_path, index=False)
                    st.session_state.cart = []
                    st.sidebar.success("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!")
                    st.rerun()
                else:
                    st.sidebar.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
        
        if st.sidebar.button("üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng"):
            st.session_state.cart = []
            st.rerun()
    else:
        st.sidebar.warning("Gi·ªè h√†ng tr·ªëng!")

# ------------------ QU·∫¢N L√ù DOANH NGHI·ªÜP ------------------
else:
    st.header("üë®‚Äçüíº Qu·∫£n l√Ω doanh nghi·ªáp")
    tabs = st.tabs(["üìã ƒê∆°n h√†ng", "üì¶ Kho h√†ng", "üìä Th·ªëng k√™", "üó∫Ô∏è Theo d√µi v·∫≠n chuy·ªÉn"])
    
    with tabs[0]:
        st.subheader("Qu·∫£n l√Ω ƒë∆°n h√†ng")
        st.dataframe(df_don, use_container_width=True)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        TRANG_THAI_DON_HANG = ["Ch·ªù x·ª≠ l√Ω", "ƒêang giao", "ƒê√£ giao", "ƒê√£ h·ªßy"]
        if not df_don.empty:
            with st.expander("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng"):
                order_id = st.selectbox("Ch·ªçn ƒë∆°n h√†ng", df_don.index, key="order_select")
                new_status = st.selectbox("Tr·∫°ng th√°i m·ªõi", TRANG_THAI_DON_HANG, key="status_select")
                
                if st.button("C·∫≠p nh·∫≠t"):
                    df_don.at[order_id, "trang_thai"] = new_status
                    df_don.to_csv(don_path, index=False)
                    st.success("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i!")
    
    with tabs[1]:
        st.subheader("Qu·∫£n l√Ω kho h√†ng")
        st.dataframe(df_kho, use_container_width=True)
        
        # Th√™m s·∫£n ph·∫©m m·ªõi
        with st.expander("Th√™m s·∫£n ph·∫©m m·ªõi"):
            with st.form("add_product"):
                new_name = st.text_input("T√™n s·∫£n ph·∫©m")
                new_desc = st.text_area("M√¥ t·∫£")
                new_qty = st.number_input("S·ªë l∆∞·ª£ng", 0, step=1)
                new_price = st.number_input("Gi√°", 0, step=10000)
                new_image = st.text_input("URL h√¨nh ·∫£nh")
                
                if st.form_submit_button("Th√™m"):
                    if new_name and new_qty and new_price:
                        new_product = pd.DataFrame([[new_name, new_qty, new_price, new_desc]], 
                                                 columns=df_kho.columns)
                        df_kho = pd.concat([df_kho, new_product], ignore_index=True)
                        df_kho.to_csv(kho_path, index=False)
                        
                        if new_image:
                            product_images[new_name] = new_image
                        
                        st.success("ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi!")
                        st.rerun()
    
    with tabs[2]:
        st.subheader("Th·ªëng k√™ doanh thu")
        if not df_don.empty:
            # Doanh thu theo k√™nh
            st.plotly_chart(px.pie(df_don, names="kenh", title="T·ªâ l·ªá k√™nh b√°n"))
            
            # Doanh thu theo th·ªùi gian
            df_don["ngay_tao"] = pd.to_datetime(df_don["ngay_tao"])
            revenue_by_date = df_don.groupby(df_don["ngay_tao"].dt.date)["gia_tri"].sum().reset_index()
            st.line_chart(revenue_by_date.set_index("ngay_tao"))
        else:
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng")
    
    with tabs[3]:
        st.subheader("Theo d√µi v·∫≠n chuy·ªÉn")
        if not df_don.empty:
            order_to_track = st.selectbox("Ch·ªçn ƒë∆°n h√†ng", df_don.index, key="track_order_select")
            order = df_don.loc[order_to_track]
            
            st.info(f"""
            **Th√¥ng tin ƒë∆°n h√†ng:**
            - Kh√°ch h√†ng: {order['ten_khach']}
            - S·∫£n ph·∫©m: {order['san_pham']}
            - Tr·∫°ng th√°i: {order['trang_thai']}
            - ƒê∆°n v·ªã v·∫≠n chuy·ªÉn: {order['don_vi_vc']}
            - Th·ªùi gian giao ∆∞·ªõc t√≠nh: {order['eta_ngay']} ng√†y
            """)
            
            # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
            map_obj = tao_ban_do("Kho HCM", order['khu_vuc'])
            if map_obj:
                folium_static(map_obj, width=700, height=400)
